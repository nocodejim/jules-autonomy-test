import httpx
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel

# Models
{% for component_name, component in schema.get("components", {}).get("schemas", {}).items() %}
{% with name=component_name, schema=component %}{% include "_model.py.j2" %}{% endwith %}
{% endfor %}

class {{ class_name }}:
    def __init__(self, base_url: str, token: Optional[str] = None):
        self.base_url = base_url
        headers = {}
        if token:
            headers["Authorization"] = f"Bearer {token}"
        self.client = httpx.Client(base_url=base_url, headers=headers)

    def close(self):
        self.client.close()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    # API Methods
    {% for path, path_item in schema.get("paths", {}).items() %}
    {% for method, operation in path_item.items() %}
    {% if method in ['get', 'post', 'put', 'delete', 'patch'] %}
    {% with path=path, method=method, operation=operation %}{% include "_method.py.j2" %}{% endwith %}
    {% endif %}
    {% endfor %}
    {% endfor %}
